/*
 * Generated by Cadeau Support.
 *
 * https://github.com/spldeolin/cadeau-support
 */

package com.spldeolin.beginningmind.core.service.impl;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import org.apache.commons.codec.digest.DigestUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.session.FindByIndexNameSessionRepository;
import org.springframework.session.Session;
import org.springframework.stereotype.Service;
import com.github.pagehelper.PageHelper;
import com.google.common.collect.Lists;
import com.spldeolin.beginningmind.core.api.CommonServiceImpl;
import com.spldeolin.beginningmind.core.api.dto.Page;
import com.spldeolin.beginningmind.core.api.exception.ServiceException;
import com.spldeolin.beginningmind.core.cache.RedisCache;
import com.spldeolin.beginningmind.core.config.SessionConfig;
import com.spldeolin.beginningmind.core.constant.CoupledConstant;
import com.spldeolin.beginningmind.core.dao.SecurityUserMapper;
import com.spldeolin.beginningmind.core.model.SecurityPermission;
import com.spldeolin.beginningmind.core.model.SecurityRoles2permissions;
import com.spldeolin.beginningmind.core.model.SecurityUser;
import com.spldeolin.beginningmind.core.model.SecurityUsers2roles;
import com.spldeolin.beginningmind.core.service.SecurityPermissionService;
import com.spldeolin.beginningmind.core.service.SecurityRoles2permissionsService;
import com.spldeolin.beginningmind.core.service.SecurityUserService;
import com.spldeolin.beginningmind.core.service.SecurityUsers2rolesService;
import com.spldeolin.beginningmind.core.util.StringRandomUtils;
import lombok.extern.log4j.Log4j2;
import tk.mybatis.mapper.entity.Condition;

/**
 * “用户”业务实现
 *
 * @author Deolin 2018/5/28
 */
@Service
@Log4j2
public class SecurityUserServiceImpl extends CommonServiceImpl<SecurityUser> implements SecurityUserService {

    @Autowired
    private SecurityUserMapper securityUserMapper;

    @Autowired
    private SecurityUsers2rolesService securityUsers2rolesService;

    @Autowired
    private SecurityRoles2permissionsService securityRoles2permissionsService;

    @Autowired
    private SecurityPermissionService securityPermissionService;

    @Autowired
    private RedisCache redisCache;

    @Autowired
    private FindByIndexNameSessionRepository<? extends Session> finder;

    @Override
    public Long createEX(SecurityUser securityUser) {
        checkOccupationForCreating(securityUser);
        // 生成盐与密码
        String salt = StringRandomUtils.generateVisibleAscii(32);
        securityUser.setSalt(salt);
        String password = DigestUtils.sha512Hex(CoupledConstant.DEFAULT_PASSWORD_EX + salt);
        securityUser.setPassword(password);
        // insert
        super.create(securityUser);
        return securityUser.getId();
    }

    @Override
    public void updateEX(SecurityUser securityUser) {
        Long id = securityUser.getId();
        if (!isExist(id)) {
            throw new ServiceException("用户不存在或是已被删除");
        }
        if (getSignerSession(id).isPresent()) {
            throw new ServiceException("用户登录中，等待用户退出或是将用户请离后再次操作");
        }
        checkOccupationForUpdating(securityUser);
        if (!super.update(securityUser)) {
            throw new ServiceException("用户数据过时");
        }
    }

    @Override
    public void deleteEX(Long id) {
        if (!isExist(id)) {
            throw new ServiceException("用户不存在或是已被删除");
        }
        if (getSignerSession(id).isPresent()) {
            throw new ServiceException("用户登录中，等待用户退出或是将用户请离后再次操作");
        }
        super.delete(id);
    }

    @Override
    public String deleteEX(List<Long> ids) {
        List<SecurityUser> exist = super.get(ids);
        if (exist.size() < ids.size()) {
            throw new ServiceException("部分用户不存在或是已被删除");
        }
        for (Long id : ids) {
            if (getSignerSession(id).isPresent()) {
                throw new ServiceException("部分用户登录中，无法删除");
            }
        }
        super.delete(ids);
        return "操作成功";
    }

    @Override
    public Page<SecurityUser> page(Integer pageNo, Integer pageSize) {
        Condition condition = new Condition(SecurityUser.class);
        condition.createCriteria();
        PageHelper.startPage(pageNo, pageSize);
        return Page.wrap(securityUserMapper.selectBatchByCondition(condition));
    }

    @Override
    public Optional<SecurityUser> searchOneByPrincipal(String principal) {
        Condition condition = new Condition(SecurityUser.class);
        condition.createCriteria().orEqualTo("username", principal).orEqualTo("mobile", principal).orEqualTo("email",
                principal);
        List<SecurityUser> securityAccounts = securityUserMapper.selectBatchByCondition(condition);
        if (securityAccounts.size() == 0) {
            return Optional.empty();
        }
        return Optional.ofNullable(securityAccounts.get(0));
    }

    @Override
    public List<String> listUserPermissions(Long userId) {
        List<String> result = Lists.newArrayList();
        // user
        SecurityUser user = this.get(userId).orElseThrow(() -> new ServiceException("用户不存在或是已被删除"));
        // user 2 role
        List<SecurityUsers2roles> roleAssociations = securityUsers2rolesService.searchBatch("userId", user.getId());
        if (roleAssociations.size() == 0) {
            return result;
        }
        // role 2 perm
        List<Long> roleIds = Lists.newArrayList();
        for (SecurityUsers2roles roleAssociation : roleAssociations) {
            roleIds.add(roleAssociation.getRoleId());
        }
        Condition condition = new Condition(SecurityRoles2permissions.class);
        condition.createCriteria().andIn("roleId", roleIds);
        List<SecurityRoles2permissions> permissionAssociations = securityRoles2permissionsService.searchBatch(
                condition);
        if (permissionAssociations.size() == 0) {
            return result;
        }
        // perm
        List<Long> permissionIds = Lists.newArrayList();
        for (SecurityRoles2permissions permissionAssociation : permissionAssociations) {
            permissionIds.add(permissionAssociation.getPermissionId());
        }
        List<SecurityPermission> permissions = securityPermissionService.get(permissionIds);
        if (permissions.size() == 0) {
            return result;
        }
        // user 2 permission

        // perm mapping
        for (SecurityPermission permission : permissions) {
            result.add(permission.getMark());
        }
        return result;
    }

    @Override
    public Boolean isAccountSigning(Long userId) {
        return getSignerSession(userId).isPresent();
    }

    @Override
    public void killSigner(Long userId) {
        Session session = getSignerSession(userId).orElseThrow(() -> new ServiceException("用户已离线"));
        // 被踢登录者 会在切面中通过自身的当前会话ID找个这个标识，找到后直接调用Shiro登出
        redisCache.setCacheWithExpireTime("killed:session:" + session.getId(), "killed",
                SessionConfig.SESSION_EXPIRE_SECONDS);
    }

    @Override
    public void banPick(Long userId) {
        SecurityUser securityUser = get(userId).orElseThrow(() -> new ServiceException("用户不存在或是已被删除"));
        super.update(securityUser.setEnableSign(!securityUser.getEnableSign()));
    }

    /**
     * 根据登录时存的PRINCIPAL_NAME_INDEX_NAME的值，通过Spring Session提供的API找到登录者的会话，
     * 会话不存在则代表未登录
     */
    private Optional<Session> getSignerSession(Long userId) {
        Collection<? extends Session> signerSessions = this.finder.findByIndexNameAndIndexValue(
                FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME, userId.toString()).values();
        // 只可能找到一个，或找不到
        if (signerSessions.size() > 0) {
            return Optional.ofNullable(signerSessions.toArray(new Session[0])[0]);
        } else {
            return Optional.empty();
        }
    }

    /**
     * 创建场合下的用户名、手机号、E-Mail占用校验
     */
    private void checkOccupationForCreating(SecurityUser securityUser) {
        if (searchOne("username", securityUser.getUsername()).isPresent()) {
            throw new ServiceException("用户名已被占用");
        }
        String mobile = securityUser.getMobile();
        if (mobile != null && searchOne("mobile", mobile).isPresent()) {
            throw new ServiceException("手机号已被占用");
        }
        String email = securityUser.getEmail();
        if (email != null && searchOne("email", email).isPresent()) {
            throw new ServiceException("E-Mail已被占用");
        }
    }

    /**
     * 更新场合下的用户名、手机号、E-Mail占用校验
     */
    private void checkOccupationForUpdating(SecurityUser securityUser) {
        Long id = securityUser.getId();
        String username = securityUser.getUsername();
        if (!id.equals(searchOne("username", username).orElse(new SecurityUser()).getId())) {
            throw new ServiceException("用户名已被占用");
        }
        String mobile = securityUser.getMobile();
        if (mobile != null) {
            if (!id.equals(searchOne("mobile", mobile).orElse(new SecurityUser()).getId())) {
                throw new ServiceException("手机号已被占用");
            }
        }
        String email = securityUser.getEmail();
        if (email != null) {
            if (!id.equals(searchOne("email", email).orElse(new SecurityUser()).getId())) {
                throw new ServiceException("E-Mail已被占用");
            }
        }
    }

}