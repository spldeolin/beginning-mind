/*
 * Generated by Cadeau Support.
 *
 * https://github.com/spldeolin/cadeau-support
 */

package com.spldeolin.beginningmind.core.service.impl;

import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.spldeolin.beginningmind.core.api.CommonServiceImpl;
import com.spldeolin.beginningmind.core.api.dto.Page;
import com.spldeolin.beginningmind.core.api.dto.PageParam;
import com.spldeolin.beginningmind.core.api.exception.ServiceException;
import com.spldeolin.beginningmind.core.constant.CoupledConstant;
import com.spldeolin.beginningmind.core.dao.OrganizationMapper;
import com.spldeolin.beginningmind.core.dto.IdNameDTO;
import com.spldeolin.beginningmind.core.dto.OrganizationNodeDTO;
import com.spldeolin.beginningmind.core.model.Organization;
import com.spldeolin.beginningmind.core.service.OrganizationService;
import lombok.extern.log4j.Log4j2;
import tk.mybatis.mapper.entity.Condition;

/**
 * “组织架构”业务实现
 *
 * @author Deolin 2018/8/28
 */
@Service
@Log4j2
public class OrganizationServiceImpl extends CommonServiceImpl<Organization> implements OrganizationService {

    @Autowired
    private OrganizationMapper organizationMapper;

    @Override
    public Long createEX(Organization organization) {
        if (searchOne("name", organization.getName()).isPresent()) {
            throw new ServiceException("组织架构名已被占用");
        }

        Long parentId = organization.getParentId();
        if (parentId == null || CoupledConstant.ROOT_ORGANIZATION_ID.equals(parentId)) {
            organization.setParentId(CoupledConstant.ROOT_ORGANIZATION_ID);
        } else {
            if (!get(parentId).isPresent()) {
                throw new ServiceException("父组织架构不存在或是已被删除");
            }
        }

        super.create(organization);
        return organization.getId();
    }

    @Override
    public Organization getEX(Long id) {
        return super.get(id).orElseThrow(() -> new ServiceException("组织架构不存在或是已被删除"));
    }

    @Override
    public void updateEX(Organization organization) {
        if (!isExist(organization.getId())) {
            throw new ServiceException("组织架构不存在或是已被删除");
        }

        Optional<Organization> exist = searchOne("name", organization.getName());
        if (exist.isPresent() && !exist.get().getId().equals(organization.getId())) {
            throw new ServiceException("组织架构名已被占用");
        }

        if (!super.update(organization)) {
            throw new ServiceException("组织架构数据过时");
        }
    }

    @Override
    public String deleteEX(List<Long> ids) {
        if (ids.contains(CoupledConstant.EDEN_ORGANIZATION_ID)) {
            throw new ServiceException(
                    "初始组织架构[ " + get(CoupledConstant.EDEN_ORGANIZATION_ID).get().getName() + "]不允许被删除");
        }

        List<Organization> exist = super.list(ids);
        if (exist.size() == 0) {
            throw new ServiceException("选中的组织架构全部不存在或是已被删除");
        }

        Condition condition = new Condition(Organization.class);
        condition.createCriteria().andIn("parentId", ids);
        if (searchBatch(condition).size() > 0) {
            throw new ServiceException("部分组织架构下存在子组织架构，无法删除");
        }

        // TODO 组织下是有用户则无法删除

        super.delete(ids);
        return "操作成功";
    }

    @Override
    public Page<Organization> page(PageParam pageParam) {
        Condition condition = new Condition(Organization.class);
        condition.createCriteria();

        pageParam.startPage();
        return Page.wrap(organizationMapper.selectBatchByCondition(condition));
    }

    @Override
    public List<OrganizationNodeDTO> tree() {
        return null;
    }

    @Override
    public List<IdNameDTO> tiny() {
        return null;
    }

}