/*
 * Generated by Cadeau Support.
 *
 * https://github.com/spldeolin/cadeau-support
 */

package com.spldeolin.beginningmind.core.service.impl;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Map.Entry;
import javax.servlet.http.HttpServletRequest;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
import org.springframework.core.env.Environment;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestBody;
import com.spldeolin.beginningmind.core.api.CommonServiceImpl;
import com.spldeolin.beginningmind.core.aspect.dto.RequestResult;
import com.spldeolin.beginningmind.core.model.RequestTrack;
import com.spldeolin.beginningmind.core.model.User;
import com.spldeolin.beginningmind.core.service.RequestTrackService;
import com.spldeolin.beginningmind.core.service.UserService;
import com.spldeolin.beginningmind.core.util.Jsons;
import com.spldeolin.beginningmind.core.util.StringRandomUtils;
import lombok.extern.log4j.Log4j2;

/**
 * “请求轨迹”业务实现
 *
 * @author Deolin 2018/8/4
 */
@Service
@Log4j2
public class RequestTrackServiceImpl extends CommonServiceImpl<RequestTrack> implements RequestTrackService {

    @Autowired
    private Environment environment;

    @Autowired
    private UserService userService;

    @Override
    public RequestTrack setJoinPointAndHttpRequest(JoinPoint joinPoint, Long userId) {
        RequestTrack track = new RequestTrack();

        track.setInsignia(StringRandomUtils.generateLegibleEnNum(6));

        track.setDate(LocalDate.now());

        track.setTime(LocalTime.now());

        track.setController(joinPoint.getTarget().getClass().getSimpleName());

        Method requestMethod = ((MethodSignature) joinPoint.getSignature()).getMethod();
        track.setRequestMethod(requestMethod.getName());

        track.setUserId(userId);

        track.setMethod(requestMethod);

        String[] parameterNames = new LocalVariableTableParameterNameDiscoverer().getParameterNames(requestMethod);
        track.setParameterNames(parameterNames);

        Object[] parameterValues = joinPoint.getArgs();
        track.setParameterValues(parameterValues);

        return track;
    }

    @Async
    @Override
    public void completeAndSaveTrack(RequestTrack track, HttpServletRequest request, Object dataObject) {
        analysizRequestTrack(track, request);
        track.setResponseBody(Jsons.toJson(ensureRequestResult(dataObject)));
        log.info("异步创建请求轨迹 {}", track);
        super.create(track);
    }

    @Async
    @Override
    public void completeAndSaveTrack(RequestTrack track, HttpServletRequest request, RequestResult requestResult) {
        analysizRequestTrack(track, request);
        track.setResponseBody(Jsons.toJson(requestResult));
        log.info("异步创建请求轨迹 {}", track);
        super.create(track);
    }

    private void analysizRequestTrack(RequestTrack track, HttpServletRequest request) {
        track.setUrl(getFullUrlFromRequest(request));

        track.setHttpMethod(request.getMethod());

        track.setProcessingMilliseconds(System.currentTimeMillis() - track.getProcessedAt());

        Long signedUserId = track.getUserId();
        if (signedUserId != null) {
            User user = userService.getEX(track.getUserId());
            track.setUserName(user.getName());
            track.setUserMobile(user.getMobile());
        }

        track.setIp(getIpFromRequest(request));

        track.setActiveProfile(environment.getActiveProfiles()[0]);

        Object requestBodyValue = getRequestBodyValueByAnnotation(track.getParameterValues(), track.getMethod());
        if (requestBodyValue != null) {
            track.setRequestBody(Jsons.toJson(requestBodyValue));
        } else {
            track.setRequestBody("");
        }
    }

    private Object getRequestBodyValueByAnnotation(Object[] parameterValues, Method method) {
        Annotation[][] annotations = method.getParameterAnnotations();
        for (int parameterIndex = 0; parameterIndex < annotations.length; parameterIndex++) {
            Annotation[] annotationsEachParameter = annotations[parameterIndex];
            for (Annotation annotation : annotationsEachParameter) {
                if (annotation instanceof RequestBody) {
                    return parameterValues[parameterIndex];
                }
            }
        }
        return null;
    }

    private RequestResult ensureRequestResult(Object object) {
        if (object instanceof RequestResult) {
            return (RequestResult) object;
        }
        return RequestResult.success(object);
    }

    private String getFullUrlFromRequest(HttpServletRequest request) {
        StringBuilder url = new StringBuilder(64);
        url.append(request.getRequestURL());
        for (Entry<String, String[]> queryValuesEachKey : request.getParameterMap().entrySet()) {
            String queryKey = queryValuesEachKey.getKey();
            for (String queryValue : queryValuesEachKey.getValue()) {
                if (queryValue != null) {
                    url.append("&");
                    url.append(queryKey);
                    url.append("=");
                    url.append(queryValue);
                }
            }
        }
        return url.toString().replaceFirst("&", "?");
    }

    public String getIpFromRequest(HttpServletRequest request) {
        String ip = request.getHeader("x-forwarded-for");
        if (null == ip || 0 == ip.length() || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("Proxy-Client-IP");
        }
        if (null == ip || 0 == ip.length() || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("WL-Proxy-Client-IP");
        }
        if (null == ip || 0 == ip.length() || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("X-Real-IP");
        }
        if (null == ip || 0 == ip.length() || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getRemoteAddr();
        }
        return ip;
    }

}